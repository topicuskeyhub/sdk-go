// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type ClientOAuth2ClientProfile int

const (
    SERVER_TO_SERVER_CLIENTOAUTH2CLIENTPROFILE ClientOAuth2ClientProfile = iota
    WEB_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
    BROWSER_BASED_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
    BROWSER_BASED_APPLICATION_WITH_REFRESH_TOKEN_CLIENTOAUTH2CLIENTPROFILE
    PUBLIC_NATIVE_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
    PUBLIC_NATIVE_APPLICATION_WITH_SECURE_STORAGE_CLIENTOAUTH2CLIENTPROFILE
    CONFIDENTIAL_NATIVE_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
)

func (i ClientOAuth2ClientProfile) String() string {
    return []string{"SERVER_TO_SERVER", "WEB_APPLICATION", "BROWSER_BASED_APPLICATION", "BROWSER_BASED_APPLICATION_WITH_REFRESH_TOKEN", "PUBLIC_NATIVE_APPLICATION", "PUBLIC_NATIVE_APPLICATION_WITH_SECURE_STORAGE", "CONFIDENTIAL_NATIVE_APPLICATION"}[i]
}
func ParseClientOAuth2ClientProfile(v string) (any, error) {
    result := SERVER_TO_SERVER_CLIENTOAUTH2CLIENTPROFILE
    switch v {
        case "SERVER_TO_SERVER":
            result = SERVER_TO_SERVER_CLIENTOAUTH2CLIENTPROFILE
        case "WEB_APPLICATION":
            result = WEB_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
        case "BROWSER_BASED_APPLICATION":
            result = BROWSER_BASED_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
        case "BROWSER_BASED_APPLICATION_WITH_REFRESH_TOKEN":
            result = BROWSER_BASED_APPLICATION_WITH_REFRESH_TOKEN_CLIENTOAUTH2CLIENTPROFILE
        case "PUBLIC_NATIVE_APPLICATION":
            result = PUBLIC_NATIVE_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
        case "PUBLIC_NATIVE_APPLICATION_WITH_SECURE_STORAGE":
            result = PUBLIC_NATIVE_APPLICATION_WITH_SECURE_STORAGE_CLIENTOAUTH2CLIENTPROFILE
        case "CONFIDENTIAL_NATIVE_APPLICATION":
            result = CONFIDENTIAL_NATIVE_APPLICATION_CLIENTOAUTH2CLIENTPROFILE
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeClientOAuth2ClientProfile(values []ClientOAuth2ClientProfile) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i ClientOAuth2ClientProfile) isMultiValue() bool {
    return false
}
