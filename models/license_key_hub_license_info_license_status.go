// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type LicenseKeyHubLicenseInfoLicenseStatus int

const (
    OK_LICENSEKEYHUBLICENSEINFOLICENSESTATUS LicenseKeyHubLicenseInfoLicenseStatus = iota
    NOT_YET_VALID_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    EXPIRED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    TERMINATED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    SOFT_LIMIT_REACHED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    HARD_LIMIT_REACHED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    HARD_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    WRONG_DOMAIN_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    BUSINESS_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    PRO_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    FEATURE_IN_USE_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
)

func (i LicenseKeyHubLicenseInfoLicenseStatus) String() string {
    return []string{"OK", "NOT_YET_VALID", "EXPIRED", "TERMINATED", "SOFT_LIMIT_REACHED", "HARD_LIMIT_REACHED", "HARD_LIMIT_EXCEEDED", "WRONG_DOMAIN", "BUSINESS_LIMIT_EXCEEDED", "PRO_LIMIT_EXCEEDED", "FEATURE_IN_USE"}[i]
}
func ParseLicenseKeyHubLicenseInfoLicenseStatus(v string) (any, error) {
    result := OK_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
    switch v {
        case "OK":
            result = OK_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "NOT_YET_VALID":
            result = NOT_YET_VALID_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "EXPIRED":
            result = EXPIRED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "TERMINATED":
            result = TERMINATED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "SOFT_LIMIT_REACHED":
            result = SOFT_LIMIT_REACHED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "HARD_LIMIT_REACHED":
            result = HARD_LIMIT_REACHED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "HARD_LIMIT_EXCEEDED":
            result = HARD_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "WRONG_DOMAIN":
            result = WRONG_DOMAIN_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "BUSINESS_LIMIT_EXCEEDED":
            result = BUSINESS_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "PRO_LIMIT_EXCEEDED":
            result = PRO_LIMIT_EXCEEDED_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        case "FEATURE_IN_USE":
            result = FEATURE_IN_USE_LICENSEKEYHUBLICENSEINFOLICENSESTATUS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeLicenseKeyHubLicenseInfoLicenseStatus(values []LicenseKeyHubLicenseInfoLicenseStatus) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i LicenseKeyHubLicenseInfoLicenseStatus) isMultiValue() bool {
    return false
}
